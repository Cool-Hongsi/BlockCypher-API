{"version":3,"sources":["components/Database.js","components/Address.js","components/Dash.js","App.js","serviceWorker.js","index.js"],"names":["Database","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","addr","address","row","addDatabase","bind","assertThisInitialized","showDatabase","paramAddr","axios","post","_this2","get","then","rows","setState","data","catch","err","console","log","TweenMax","to","opacity","_this3","react_default","a","createElement","className","Button","color","onClick","Table","striped","map","el","index","HASHCODE","REGISTRATION","React","Component","Address","form","payToAddress","payToAmount","hexValue","showLink","showdb","setData","sendData","showDB","e","name","target","value","objectSpread","defineProperty","amount","payFromAddress","hash","pk","result","Container","Row","Col","xs","sm","md","lg","xl","parseFloat","balance","type","onChange","placeholder","required","style","width","height","href","rel","Database_Database","Dash","App","generateData","getCoin","generateWallet","showAddress","getData","fetch","json","y","paramAddress","concat","resultdata","txs","history","push","display","_this4","Dash_Dash","react_router","exact","path","render","Address_Address","final_balance","withRouter","Boolean","window","location","hostname","match","ReactDOM","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f2ddecd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport axios from 'axios';\r\nimport { Button, Table } from 'reactstrap';\r\nimport { TweenMax } from 'gsap';\r\n\r\nimport './Database.css';\r\n\r\nexport default class Database extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            addr : this.props.address,\r\n            row : []\r\n        }\r\n\r\n        this.addDatabase = this.addDatabase.bind(this);\r\n        this.showDatabase = this.showDatabase.bind(this);\r\n    }\r\n\r\n    addDatabase(paramAddr){\r\n        axios.post('/api/addDatabase', {addr : paramAddr});\r\n    };\r\n\r\n    showDatabase(){\r\n        axios.get('/api/showDatabase').then((rows) => {\r\n            this.setState({\r\n                row : rows.data // Definitely put .data likewise above\r\n            });\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        })\r\n\r\n        TweenMax.to(\".db-table-container\", 3, { // Show tag which has the classname(.db-table-container)\r\n            opacity: .8\r\n        })\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"db-container\">\r\n                    <div className=\"db-container-title\">Database</div><br/><br/>\r\n                    <Button className=\"db-add-txs\" color=\"primary\" onClick={() => this.addDatabase(this.state.addr)}>Add Transaction</Button><br/><br/>\r\n                    <Button className=\"db-show-txs\" color=\"danger\" onClick={this.showDatabase}>Show Transaction</Button><br/><br/><br/><br/>\r\n                    <div className=\"db-table-container\">\r\n                    {/* table contents will be indicated after the user click the show transaction button (will receive the data from database) */}\r\n                        <Table striped className=\"db-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>HASH</th>\r\n                                    <th>REGISTRATION</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.row.map((el, index) => { {/* By using map method, I'm able to have an access to each index */}\r\n                                    return(\r\n                                        <tr>\r\n                                            <td>{index}</td>\r\n                                            <td>{el.HASHCODE}</td>\r\n                                            <td>{el.REGISTRATION}</td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Database from './Database';\r\n\r\nimport axios from 'axios';\r\nimport { Button, Container, Row, Col } from 'reactstrap';\r\n\r\nimport './Address.css';\r\n\r\nexport default class Address extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            form : { // In order to receive and store the data from user whenever the user inputs something inside of input tag.\r\n                payToAddress : '',\r\n                payToAmount : ''\r\n            },\r\n            hexValue : '',\r\n            showLink : false,\r\n            showdb : false\r\n        }\r\n\r\n        this.setData = this.setData.bind(this);\r\n        this.sendData = this.sendData.bind(this);\r\n        this.showDB = this.showDB.bind(this);\r\n    }\r\n\r\n    setData(e){ // Whenever I typed something in input tag, the data will be stored in address state depending on name property\r\n        var name = e.target.name; // Each input name property\r\n        var value = e.target.value; // Each input value property\r\n\r\n        this.setState({\r\n            form :{\r\n                ...this.state.form, // Spread ES6\r\n                [name] : value\r\n            }\r\n        })\r\n    }\r\n\r\n    sendData(){\r\n\r\n        // First Trial\r\n        // var newtx = {\r\n        //     inputs: [{addresses: [this.props.address]}],\r\n        //     outputs: [{addresses: [this.state.form.payToAddress], value: this.state.form.payToAmount}]\r\n        // };\r\n\r\n        // console.log(newtx.inputs[0].addresses[0]);\r\n        // console.log(newtx.outputs[0].addresses[0]);\r\n        // console.log(newtx.outputs[0].value);\r\n        \r\n        // axios.post('https://api.blockcypher.com/v1/bcy/test/txs/new', JSON.stringify(newtx)).then(() => {\r\n        //     console.log(\"Success\");\r\n        // }).catch((err) => {\r\n        //     console.log(err);\r\n        // })\r\n\r\n        // Second Trial\r\n        // Have an access to router in nodejs ('/api/payment/') and send some data with body value,\r\n        // Once nodejs received the request from frontend, deal with some works and transfer the response to frontend via then method\r\n        axios.post(`/api/payment`, {amount : this.state.form.payToAmount, payFromAddress : this.props.address, \r\n            payToAddress : this.state.form.payToAddress, hash : this.props.hash, pk : this.props.pk}).then((result) => {\r\n                this.setState({\r\n                    hexValue : result.data, // Definitely should put .data because the response value is object : { data : {} ~~ \r\n                    showLink : !this.state.showLink\r\n                })\r\n            }).catch((err) => {\r\n                console.log(err);\r\n        })\r\n    };\r\n\r\n    showDB(){\r\n        this.setState({\r\n            showdb : !this.state.showdb\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"address-info-container\">\r\n                    <div className=\"address-info\">\r\n                        <div className=\"address-info-section\">\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\r\n                                        <div className=\"left\">\r\n                                            <div className=\"balance-address\">{this.props.address}</div>\r\n                                            {/* <div>Private Key : {this.props.pk}</div> */}\r\n                                            <div className=\"balance-value\">{parseFloat(this.props.balance) / 100000000} BTC</div>\r\n                                            {/* <h3>Hash : {this.props.hash}</h3> */}\r\n                                        </div>\r\n                                    </Col>\r\n                                    <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\r\n                                        <div className=\"right\">\r\n                                            <input className=\"pay-to-address\" type=\"text\" name=\"payToAddress\" onChange={this.setData} placeholder=\"Pay To Address\" required /><br/><br/>\r\n                                            <input className=\"pay-to-amount\" type=\"text\" name=\"payToAmount\" onChange={this.setData} placeholder=\"Amount\" required /><br/><br/>\r\n                                            <Button className=\"pay-to-btn\" color=\"danger\" onClick={this.sendData}>Payment</Button>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </div>\r\n                    </div>\r\n                </div>      \r\n                <br/>\r\n\r\n                <div className=\"hex-container\">\r\n                    <div className=\"hex-container-title\">Hash Code</div>\r\n                    <input className=\"hex-container-input\" type=\"text\" style={{width:\"100%\", height:\"40px\"}} value={this.state.hexValue} /><br/><br/>\r\n                    {this.state.showLink ? <a href=\"https://live.blockcypher.com/btc-testnet/pushtx/\" target=\"_blank\" onClick={this.showDB} rel=\"noopener noreferrer\"><Button className=\"send-hashcode-btn\" color=\"primary\">Send Hash Code</Button></a> : null}<br/><br/>\r\n                </div>\r\n                \r\n                {this.state.showdb ? <Database address={this.props.address} /> : null}\r\n                {/* The value of this.state.showdb is true -> show the Database component, otherwise, ignore (null) */}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport './Dash.css';\r\n\r\nexport default class Dash extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"dash-container\">\r\n                    <div className=\"dash-content\">\r\n                        BlockCypher API\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Address from './components/Address'; // Import another component\nimport Dash from './components/Dash'; // Import another component\n\nimport { Route, Switch, withRouter } from 'react-router-dom'; // Router Library\nimport { TweenMax } from 'gsap'; // Desgin Library\nimport { Button, Container, Row, Col } from 'reactstrap';\nimport axios from 'axios'; // Transfer Library\n\nimport './App.css';\n\nclass App extends React.Component{\n  \n  constructor(props){\n    super(props);\n\n    this.state = {\n      address : '',\n      data : {},\n      generateData : {},\n      getCoin : false\n    }\n\n    this.generateWallet = this.generateWallet.bind(this);\n    this.showAddress = this.showAddress.bind(this);\n    this.setData = this.setData.bind(this);\n    this.getData = this.getData.bind(this);\n    // this.noGenerateWallet = this.noGenerateWallet.bind(this);\n  };\n\n  // Check whether lifecycle method is working properly or no\n  // componentDidMount(){\n  //   fetch('/api').then((res) => {\n  //     res.json().then((result) => {\n  //       this.setState({\n  //         data : result\n  //       })\n  //     })\n  //   })\n  // }\n\n  generateWallet(){\n    axios.get('/api/generateWallet'); // Have an access to router in nodejs ('/api/generateWallet')\n\n    fetch('/api/generateWallet').then((result) => { // from res.json(data) in router, able to receive the data\n      result.json().then((data) => {\n        this.setState({\n          generateData : data,\n          getCoin : true\n        })\n      }).catch((err) => {\n        console.log(err);\n      })\n    }).catch((err) => {\n      console.log(err);\n    });\n\n    TweenMax.to(\".generate-info\", 2, { // Show the tag which has the classname (generate-info)\n      y : 30,\n      opacity : .8\n    })\n  };\n\n  // noGenerateWallet(){\n  //   TweenMax.to('.generate-container', 1, {\n  //     visibility: 'hidden',\n  //     opacity: 0\n  //   })\n\n  //   this.setState({\n  //     getCoin : false\n  //   })\n  // }\n\n  setData(e){\n    this.setState({\n      address : e.target.value // Whenever I typed something in input tag, the data will be stored in address state\n    })\n  };\n\n  /* getData method will have an access to the data by using BlockCypher API (depending on the paramter (Public Address)) */\n  getData(paramAddress){\n    fetch(`https://api.blockcypher.com/v1/btc/test3/addrs/${paramAddress}/full`).then((result) => {\n        result.json().then((resultdata) => {\n            this.setState({\n              data : resultdata // Store virtual wallet data into this.state.data\n            });\n\n            if(this.state.data.txs[0].hash){ // At least one transaction\n              this.props.history.push('/address'); // Change URL in order to show another component\n\n              // TweenMax.to('.result-container', 2, { // Show the tag which has the classname (result-container)\n              //   display: 'block',\n              //   y: 50,\n              //   opacity: .8\n              // });\n            }\n            else{\n              // Nothing To Do\n            }\n          }).catch((err) => {\n            console.log(err);\n        })\n    }).catch((err) => {\n        console.log(err);\n    })\n  };\n\n  showAddress(){\n    TweenMax.to('.address-container', 0, { // Show the tag which has the classname (address-container)\n      display: 'block'\n    });\n  };\n\n  render(){\n    return(\n      <div>\n        <Dash />\n\n        <div className=\"generate-container\">\n          <Container>\n            <Row>\n              <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n                <div className=\"left\">\n                  <Button className=\"gw-btn\" color=\"secondary\" onClick={this.generateWallet}>Generate Wallet</Button><br/><br/>\n                  {/* <button onClick={this.noGenerateWallet}>No</button> */}\n                </div>\n              </Col>\n              <Col xs=\"12\" sm=\"12\" md=\"12\" lg=\"6\" xl=\"6\">\n                <div className=\"right\">\n                  <div className=\"generate-info\">\n                    <div className=\"pa\">Public Address</div>\n                    <input type=\"text\" className=\"gc-input-pa\" value={this.state.generateData.address} /><br/><br/>\n                    <div className=\"pk\">Private Key</div>\n                    <input type=\"text\" className=\"gc-input-pa\" value={this.state.generateData.pk} /><br/><br/>\n                    {this.state.getCoin ? <a href=\"https://tbtc.bitaps.com\" target=\"_blank\" onClick={this.showAddress} rel=\"noopener noreferrer\"><Button className=\"gc-btn\" color=\"info\">Get Coin</Button></a> : null}\n                  </div> \n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n\n        <div className=\"address-container\">\n          <input className=\"search-pa\" type=\"text\" onChange={this.setData} placeholder=\"Public Address\" required /><br /><br />\n          <Button className=\"search-btn\" color=\"primary\" onClick={() => this.getData(this.state.address)}>Balance</Button>\n          <hr />\n          <div className=\"msg\">Click Balance button after your wallet receives testnet bitcoin</div><br/>\n          <a className=\"check-here\" href=\"https://live.blockcypher.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Check Here</a>\n        </div>\n\n        <div className=\"result-container\">\n          <Switch>\n            <Route exact path=\"/address\" render={() => (\n              <Address address={this.state.data.address} balance={this.state.data.final_balance} \n                pk={this.state.generateData.pk} hash={this.state.data.txs[0].hash} />\n            )}/>\n          </Switch>\n        </div>\n      </div>\n      )\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(   \n    <BrowserRouter>\n\t    <App />\n    </BrowserRouter>, \n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}